const aritize = require('./sources/aritize');
const combinators = require('./sources/combinators');
const decorators = require('./sources/decorators');
const comparators = require('./sources/comparators');
const enums = require('./sources/enums');
const lenses = require('./sources/lenses');
const state = require('./sources/state');
const transducers = require('./sources/transducers');
const types = require('./sources/types');

module.exports = {
    aritize: aritize.aritize,
    isNil: types.isNil,
    isVoid: types.isVoid,
    isNull: types.isNull,
    isString: types.isString,
    isAny: types.isAny,
    isTrue: types.isTrue,
    isNumber: types.isNumber,
    isFunc: types.isFunc,
    isArray: types.isArray,
    isObject: types.isObject,
    isInt: types.isInt,
    isFloat: types.isFloat,
    isBool: types.isBool,
    isFalse: types.isFalse,
    isDate: types.isDate,
    isRegex: types.isRegex,
    isNode: types.isNode,
    isNodeList: types.isNodeList,
    isMap: types.isMap,
    isSet: types.isSet,
    isWeakMap: types.isWeakMap,
    isWeakSet: types.isWeakSet,
    isPromise: types.isPromise,
    isIterator: types.isIterator,
    isIterable: types.isIterable,
    isArrayOf: types.isArrayOf,
    isObjectOf: types.isObjectOf,
    identity: combinators.identity,
    getter: combinators.getter,
    tap: combinators.tap,
    compose: combinators.compose,
    pipe: combinators.pipe,
    and: combinators.and,
    or: combinators.or,
    splat: combinators.splat,
    monadic: decorators.monadic,
    dyadic: decorators.dyadic,
    triadic: decorators.triadic,
    tetradic: decorators.tetradic,
    once: decorators.once,
    not: decorators.not,
    flip: decorators.flip,
    maybe: decorators.maybe,
    curry: decorators.curry,
    curryRight: decorators.curryRight,
    partial: decorators.partial,
    partialRight: decorators.partialRight,
    given: decorators.given,
    memoize: decorators.memoize,
    transducers: transducers,
    stateful: state.stateful,
    counter: state.counter,
    chosen: state.chosen,
    lens: lenses.lens,
    makeLenses: lenses.makeLenses,
    view: lenses.view,
    over: lenses.over,
    set: lenses.set,
    assoc: enums.assoc,
    field: enums.field,
    has: enums.has,
    exec: enums.exec,
    execRight: enums.execRight,
    access: enums.access,
    extend: enums.extend,
    merge: enums.merge,
    immutable: enums.immutable,
    first: enums.first,
    last: enums.last,
    map: enums.map,
    flatMap: enums.flatMap,
    flatten: enums.flatten,
    eq: comparators.eq,
    gt: comparators.gt,
    lt: comparators.lt,
    gte: comparators.gte,
    lte: comparators.lte,
    locals: comparators.locals
};