import arity from './arity';
import type from './types';
import combinators from './combinators';
import decorators from './decorators';
import operators from './operators';
import lenses from './lenses';
import transducers from './transducers';
import monads from './monads';

export default {
    aritize: arity.aritize,
    monadic: arity.monadic,
    dyadic: arity.dyadic,
    triadic: arity.triadic,
    tetradic: arity.tetradic,
    
    isNil: type.isNil,
    isAny: type.isAny,
    isNull: type.isNull,
    isVoid: type.isVoid,
    isString: type.isString,
    isNumber: type.isNumber,
    isInt: type.isInt,
    isFloat: type.isFloat,
    isBool: type.isBool,
    isTrue: type.isTrue,
    isFalse: type.isFalse,
    isFunc: type.isFunc,
    isObject: type.isObject,
    isArray: type.isArray,
    isDate: type.isDate,
    isRegex: type.isRegex,
    isNode: type.isNode,
    isNodeList: type.isNodeList,
    isPromise: type.isPromise,
    isIterator: type.isIterator,
    isIterable: type.isIterable,
    isArrayOf: type.isArrayOf,
    isObjectOf: type.isObjectOf,
    isSetoid: type.isSetoid,
    isFunctor: type.isFunctor,
    isApply: type.isApply,
    isFoldable: type.isFoldable,
    isBifunctor: type.isBifunctor,
    isSemigroup: type.isSemigroup,
    isMonoid: type.isMonoid,
    isMonad: type.isMonad,
    isApplicative: type.isApplicative,

    id: combinators.id,
    getter: combinators.getter,
    tap: combinators.tap,
    pipe: combinators.pipe,
    compose: combinators.compose,
    and: combinators.and,
    or: combinators.or,

    once: decorators.once,
    not: decorators.not,
    flip: decorators.flip,
    curry: decorators.curry,
    curryRight: decorators.curryRight,
    partial: decorators.partial,
    partialRight: decorators.partialRight,
    given: decorators.given,
    memoize: decorators.memoize,

    Identity: monads.Identity,
    IO: monads.IO,
    Maybe: monads.Maybe,
    None: monads.None,
    Some: monads.Some,
    Either: monads.Either,
    Left: monads.Left,
    Right: monads.Right,
    State: monads.State,
    Task: monads.Task,
    liftA2: monads.liftA2,
    liftA3: monads.liftA3,
    liftA4: monads.liftA4,
    liftA5: monads.liftA5,

    lens: lenses.lens,
    makeLenses: lenses.makeLenses,
    mappedLens: lenses.mappedLens,
    view: lenses.view,
    over: lenses.over,
    set: lenses.set,

    call: operators.call,
    field: operators.field,
    has: operators.has,
    merge: operators.merge,
    immutable: operators.immutable,
    first: operators.first,
    last: operators.last,
    head: operators.head,
    tail: operators.tail,
    initial: operators.initial,
    rest: operators.rest,
    unique: operators.unique,
    union: operators.union,
    map: operators.map,
    flatten: operators.flatten,
    flatMap: operators.flatMap,
    assoc: operators.assoc,
    equals: operators.equals,
    ap: operators.ap,
    intersect: operators.intersect,
    differ: operators.differ,
    pairs: operators.pairs,

    transducers
};